# Git
#
# # Install Git in Debian Linux distributions like Ubuntu
sudo apt-get update
sudo apt-get install -y git

# Install Git in RedHast distributions like RHEl, CentOs
sudo yum update
sudo yum install -y git

# Show's the current git version
git --version

# List global configuration for the current user
git config --global --list

# Set the name and email to the git global configuration
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

# To Verify the previous commands
git config --global --list

# Check for .gitconfig file in user's home directory
ls -la ~

# Look the git global configuration written to this file at the user's home directory
cat ~/.gitconfig

# Create a directory
mkdir myfirstrepo

# Change the working directory to myrepo
cd myfirstrepo

# Create the index.html file and insert the Hello World text to the html file
echo "Hello World" > index.html

ls -la

# View the index.html file
cat index.html

# Check the status of the index.html file. Returns an error saying a not a git repository
git status

# Create an empty Git repository
git init

# Look for the .git directory in the current directory
ls -la

# Check the status of the index.html file. index.html will be a untracked file
git status

# Add the file to the staging area
git add index.html


# Check status again. index.html will be in the "Changes to be committed section"
git status

# Remove the file from the staging area to the working directory
git rm --cached index.html

# Verify by checking git status
git status

# Adds all the files in working directory to the staging area
git add .

# Check status again to verify the last command
git status

# List all your commits. As of now, it will be empty
git log

# Moves all your changes in staging area to the local repository
git commit -m "Initial Commit"

# Your last commit should be listed here
git log



# Create some dummy files
echo "Hi" > index.html
echo "commit2" > help.txt

# Check status of those files
git status

# Add the index.html file to the staging area
git add index.html

# Check status again
git status

# Add the text to the index.html
echo "This is my 2nd line" >> index.html

# Check the status again
git status

# Show changes between last two commits
git diff

# Append new text to the help.txt file
echo "new line" >> help.txt

# Add all the files to the staging area
git add .

# Check status again
git status

# Make your second commit
git commit -m "Second Commit"

# Check status again
git status

# Verify your commit using git log
git log

# Check changes between two commits by passing commit ID
git diff COMMIT_ID_1 COMMIT_ID_2

# Check the changes made in each commit
git log -p

# The following prints the commit message alone with commit ID
git log --oneline

# Add one more change
echo "Completely new change" > index.html

# Check the status
git status

# Print the file's content
cat index.html

# List the stashes in your repository
git stash list

# Stash the changes in your working directory
git stash

# List the stashes that you currently have
git stash list

# Print the content of the file again to check
cat index.html

# Check the git status
git status

# Move the changes from stash to the working directory
git stash pop

# Check if the stash still exists
git stash list

# See the modifications applied by the stash in your working directory
git status

